# Reloader Service

Handles web browser reload requests.


## Preamble

    debug = require('debug')('livereload:reloader')
    {RelPathList} = require 'pathspec'


## Exports

    exports.create = ->
      new ReloaderService()


## Implementation

    class ReloaderService
      constructor: ->
        @name = 'reloader'

        @_reloadTimer = null
        @_resetPendingRequest()

        @_liveReloadMasks = RelPathList.parse(["*.css", "*.png", "*.jpg", "*.gif"])

      reload: (request, callback) ->
        @_appendRequestToPending(request)
        @_scheduleReloading()

      _resetPendingRequest: ->
        @_pendingRequest = { changes: [], forceFullReload: no, fullReloadDelay: 0 }

      _appendRequestToPending: ({ changes, forceFullReload, fullReloadDelay }) ->
        Array_pushAll @_pendingRequest.changes, changes  if changes?
        @_pendingRequest.forceFullReload or= forceFullReload  if forceFullReload?
        @_pendingRequest.fullReloadDelay = Math.max(@_pendingRequest.fullReloadDelay, fullReloadDelay)  if fullReloadDelay?

      _scheduleReloading: ->
        isFull = @_pendingRequest.forceFullReload or !@_canRefreshChangesLive(@_pendingRequest.changes)
        delay = (if isFull then @_pendingRequest.fullReloadDelay else 0)

        clearTimeout(@_reloadTimer) if @_reloadTimer
        @_reloadTimer = setTimeout(@_performReload.bind(@), delay)

      _performReload: ->
        @_reloadTimer = null

        debug "TODO send reload request: %j", @_pendingRequest
        @_resetPendingRequest()


Live refresh is only available for a pre-defined list of extensions:

      _canRefreshChangesLive: (changes) ->
        changes.every((change) => @_canRefreshPathLive(change.path))

      _canRefreshPathLive: (path) ->
        @_liveReloadMasks.matches(path)


## Helpers

    Array_pushAll = (array, source) ->
      array.push.apply(array, source)
