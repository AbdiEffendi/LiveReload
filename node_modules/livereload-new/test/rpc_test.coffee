{deepEqual} = require 'assert'
Path = require 'path'
MemoryStream = require 'memorystream'

rpc = require "../#{process.env.JSLIB or 'lib'}/rpc"

class MockService
  constructor: (@name, @log) ->

  bar: (arg, cb) ->
    @log.push ['bar', arg]
    cb()


describe "RPC", ->

  beforeEach ->
    @events = []

    @rpc = rpc.createConnection(rpc.createMockTransport())
    @rpc.publish new MockService('foo', @events)
    @rpc.on 'idle', => @events.push ['idle']


  it "should simply serialize a message that does not have a callback", ->
    @rpc.send 'boz.biz', 42
    deepEqual @rpc.transport.messages, [['boz.biz', 42]]
    deepEqual @events, []


  it "should send a simple message without a callback", ->
    @rpc.send 'boz.biz', 42
    deepEqual @rpc.transport.messages, [['boz.biz', 42]]
    deepEqual @events, []


  it "should handle a message round-trip involving a callback", ->
    cb = => @events.push ['callback-called']
    @rpc.send 'boz.biz', 42, cb
    deepEqual @rpc.transport.messages, [['boz.biz', 42, '$1']]
    deepEqual Object.keys(@rpc.callbacks), ['$1']
    deepEqual @events, []

    @rpc.transport.simulate ['$1', 24]
    deepEqual @events, [['callback-called']]


  it "should send the received messages to the published services", (done) ->
    @rpc.transport.simulate ['foo.bar', 42]
    process.nextTick => process.nextTick =>
      deepEqual @rpc.transport.messages, []
      deepEqual @events, [['bar', 42], ['idle']]
      done()




describe "RPC JSONStreamTransport", ->

  beforeEach ->
    @input  = new MemoryStream()
    @output = new MemoryStream(null, readable: no)
    @transport = rpc.createJsonStreamTransport(@input, @output)

    @messages = []
    @transport.on 'message', (message) =>
      @messages.push message


  it "should emit 'message' after receiving an incoming message", ->
    @input.write JSON.stringify(['foo', 42]) + "\n"
    deepEqual @messages, [['foo', 42]]


  it "should emit 'message' twice after receiving two messages in one payload", ->
    @input.write JSON.stringify(['foo', 42]) + "\n" + JSON.stringify(['bar', 24]) + "\n"
    deepEqual @messages, [['foo', 42], ['bar', 24]]
