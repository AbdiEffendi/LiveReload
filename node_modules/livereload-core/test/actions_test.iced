{ ok, deepEqual } = require 'assert'

{R} = require "../#{process.env.JSLIB or 'lib'}/session"
actionsPlugin = require "../#{process.env.JSLIB or 'lib'}/plugins/actions"


class MockTool
  isLiveReloadTool: yes

class JerryAction
  schema:
    $extends: 'Action'

  computeDefaultRules: ->
    [1, 2, 3]

  computeSteps: (rule) ->

class JerryRule
  schema:
    $extends: 'Rule'

    sourceSpec:              { type: String }
    destSpec:                { type: String }

class JerryStep
  schema:
    $extends: 'Step'

    sourcePath:              { type: String }
    destPath:                { type: String }

class RFSTree

class Project_Mock
  # schema:
  #   tree:                    { type: 'RFSTree' }




describe "Actions System", ->

  beforeEach ->
    @universe = new R.Universe()

  it "woots", (done) ->
    @universe.define(actionsPlugin.definitions, [JerryAction, JerryRule, JerryStep])
    await @universe.performAndWait =>
      @jerryAction = @universe.create('JerryAction', category: 'Stylesheets', tool: new MockTool())
      @jerryActionInstance = @universe.create('ActionInstance', action: @jerryAction)
    , defer()

    deepEqual @jerryActionInstance.defaultRules, [1, 2, 3]
    done()

  it "moots", (done) ->
    @universe.define(actionsPlugin.definitions, [RFSTree, Project_Mock, JerryAction, JerryRule, JerryStep])

    @project = @universe.create('Project')

    # await @universe.performAndWait =>
    #   @jerryAction = @universe.create('JerryAction', category: 'Stylesheets')
    #   @jerryActionInstance = @universe.create('ActionInstance', action: @jerryAction)
    # , defer()

    # deepEqual @jerryActionInstance.defaultRules, [1, 2, 3]
    done()
