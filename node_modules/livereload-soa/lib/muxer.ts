import services = require('../lib/service');

class MuxerService implements services.Service, services.Carrier, services.CarrierFactory {
    private serviceCarriers = [];

    constructor(private carrier: services.Carrier) {
    }

    onmessage(message) {
        var service = this.findService(message);
        if (service)
            service.onmessage(message);
        else
            throw new Error("Cannot route message");
    }

    ondisconnect() {
        this.serviceCarriers.forEach((carrier) => {
            carrier.service.ondisconnect();
        });
    }

    send(message) {
        var service = this.findService(message);
        if (service)
            service.onmessage(message);
        else
            this.carrier.send(message);
    }

    pipe(service: services.Service): services.Carrier {
        var carrier = new MuxerCarrier(this, service);
        this.serviceCarriers.push(carrier);
        return carrier;
    }

    updateProvidedServices() {
        var providedServices = [];
        this.serviceCarriers.forEach((carrier) => {
            providedServices.push.apply(providedServices, carrier.providedServices);
        });
        this.send({ command: 'hello', services: providedServices });
    }

    private findService(message) {
        var service = null;
        this.serviceCarriers.forEach((carrier) => {
            if (carrier.providedServices.indexOf(message.service) >= 0) {
                service = carrier.service;
                // break (if we could)
            }
        });
        return service;
    }
}

class MuxerCarrier implements services.Carrier {
    public providedServices = [];

    constructor(private muxer: MuxerService, public service: services.Service) {
    }

    send(message) {
        if (message.command === 'hello') {
            this.providedServices = message.services;
            this.muxer.updateProvidedServices();
        } else {
            this.muxer.send(message);
        }
    }
}


export function endpoint(carrier): services.Service {
    return new MuxerService(carrier);
}
