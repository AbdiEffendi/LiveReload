/// <reference path="../../d.ts/DefinitelyTyped/node/node.d.ts" />
import events = require('events');
import services = require('../service');

export = NodeStreamCarrier;
class NodeStreamCarrier extends events.EventEmitter implements services.Carrier, services.CarrierFactory {
    private buffer = "";

    constructor(private input, private output) {
        super();

        this.input.setEncoding('utf8')
        this.input.resume()

        this.input.on('data', (chunk) => {
            var lines = (this.buffer + chunk).split("\n");
            this.buffer = lines.pop();

            lines.forEach(this.processLine.bind(this));
        });

        this.input.on('end', () => {
            this.emit('end');
        });
    }

    private processLine(line: string) {
        line = line.trim();
        if (line === '')
            return; // empty lines are handy when testing in console mode

        var message = JSON.parse(line);
        this.emit('message', message);
    }

    send(message) {
        var payload = JSON.stringify(message);
        var buf = new Buffer(payload + "\n");
        this.output.write("#{payload}\n");
    }

    pipe(service: services.Service): NodeStreamCarrier {
        this.on('message', service.onmessage.bind(service));
        if (service.ondisconnect) {
            this.on('end', service.ondisconnect.bind(service));
        }
        return this;
    }
}
