/// <reference path="./d.ts/DefinitelyTyped/node/node.d.ts" />

declare module "undefined" {

import events = require('events');
import api = require('./api');

// lib/api.d.ts
export interface Message {
    service?: string;
    command?: string;
    callback?: number;
    reply?: Message;
    error?: Error;
    result?: any;
}
export interface Carrier {
    send(message: Message): void;
}
export interface MasterCarrier extends Carrier {
    pipe(service: Service): Carrier;
}
export interface Service {
    onmessage(message: Message): void;
    ondisconnect(): void;
}

// lib/carrier-node-stream.d.ts
export class NodeStreamCarrier extends events.EventEmitter {
    private input;
    private output;
    private buffer;
    constructor(input, output);
    public _processLine(line): void;
    public send(message): void;
    public pipe(service): NodeStreamCarrier;
}

// lib/muxer.d.ts
export function createMuxer(carrier): api.Service;

// lib/services.d.ts
export class ServiceImpl {
    public options;
    public name;
    private carrier;
    private pendingCallbacks;
    private nextCallbackId;
    constructor(carrier, options);
    public initialize(): void;
    public send(message): void;
    public sendWithReply(message, callback): void;
    public onmessage(message): void;
    public ondisconnect(): void;
}

}
