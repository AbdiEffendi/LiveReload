import api = require('./api');

export class ServiceImpl implements api.Service {
    public name;
    private carrier;
    private pendingCallbacks = {};
    private nextCallbackId = 1;

    constructor(carrier, public options) {
        this.name = options.name;

        this.initialize();

        this.carrier = carrier.pipe(this);
        this.send({command: 'hello', services: [this.name]});
    }

    initialize() {
    }

    send(message) {
        this.carrier.send(message);
    }

    sendWithReply(message, callback) {
        var callbackId = this.nextCallbackId++;
        this.pendingCallbacks[callbackId] = callback;

        message.reply = { service: this.name, callback: callbackId };
        this.send(message);
    }

    onmessage(message) {
        var callbackId = message.callback;
        if (typeof(callbackId) === 'number') {
            var callback = this.pendingCallbacks[callbackId];
            if (callback) {
                delete this.pendingCallbacks[callbackId];
                callback(message);
            }
        } else if (message.command) {
            var handler = this['on_' + message.command];
            if (!handler)
                throw new Error("Unknown command " + message.command);

            handler.call(this, message, (error, result) => {
                if (message.reply) {
                    var reply = message.reply;
                    if (error)
                        reply.error = error;
                    else
                        reply.result = result;
                    this.send(reply);
                } else if (error) {
                    throw error;
                }
            });
        }
    }

    ondisconnect() {

    }
}
