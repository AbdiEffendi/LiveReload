/// <reference path="../../livereload-soa/index.d.ts" />
/// <reference path="../d.ts/livereload-server.d.ts" />
import soa = require('livereload-soa');
import fs = require('fs');
import Path = require('path');
import LRWebSocketServer = require('livereload-server');
var urloverride = require('./urloverride');

class BrowserService extends soa.ServiceImpl {

    private appVersion;
    private server;
    private urlOverrideCoordinator = new urloverride.URLOverrideCoordinator();
    private refreshCount = 0;

    on_init(command, callback) {
        this.appVersion = command.appVersion;

        this.server = new LRWebSocketServer({
            port: +process.env['LRPortOverride'] || null,
            protocols: { saving: 1 },
            id: "com.livereload.LiveReload",
            name: "LiveReload",
            version: this.appVersion
        });

        this.server.on('connected',     this._connectionCountChanged.bind(this));
        this.server.on('disconnected',  this._connectionCountChanged.bind(this));
        this.server.on('command',       this._handleIncomingCommand.bind(this));
        this.server.on('httprequest',   this._onhttprequest.bind(this));
        this.server.on('livereload.js', this._serveLiveReloadJs.bind(this));
        this.server.on('error',         this._handleServerError.bind(this));

        this.server.listen((err) => {
            if (err && err.code && err.code === 'EADDRINUSE') {
                this.send({ service: 'kernel', command: 'on-port-occupied-error' });
                return callback(null);
            }
            if (err) return callback(err);

            this._log('info', "WebSocket server listening on port " + this.server.port + ".");

            this._connectionCountChanged();
            this._refreshCountChanged();

            callback(null);
        });
    }

    on_reload(command, callback) {
        command.messages.forEach((message) => {
            this._reload(message);
        });
    }

    dispose(callback: (err) => void) {
        this._log('info', "WebSocket server shutting down...");
        this.server.close();
        setTimeout(() => {
            this._log('verbose', "WebSocket server closed.");
            callback(null);
        }, 20);
    }

    private _reload(message) {
        // if message.enableOverride and @urlOverrideCoordinator.shouldOverrideFile(path)
        //   message.overrideURL = @urlOverrideCoordinator.createOverrideURL(path)
        //   delete message.enableOverride

        this.server.monitoringConnections.forEach((c) => c.send(message));

        this.refreshCount++;
        this._refreshCountChanged();
    }

    private _handleIncomingCommand(connection, message) {
        this._log('verbose', "Ignoring incoming browser notification: " + JSON.stringify(message));
    }

    private _connectionCountChanged() {
        this.send({ service: 'kernel', command: 'server-connection-count-changed', connectionCount: this.server.monitoringConnectionCount() });
    }

    private _refreshCountChanged() {
        this.send({ service: 'kernel', command: 'server-refresh-count-changed', refreshCount: this.refreshCount });
    }

    private _serveLiveReloadJs(req, res) {
        this._log('verbose', "Serving livereload.js to the browser.");
        fs.readFile(Path.join(__dirname, '../res/livereload.js'), 'utf8', (err, data) => {
            if (err) throw err;
            res.writeHead(200, { 'Content-Length': data.length, 'Content-Type': 'text/javascript' });
            res.end(data);
        });
    }

    private _onhttprequest(url, request, response) {
        this.urlOverrideCoordinator.handleHttpRequest(url, (err, result) => {
            if (err) {
                this._log('warn', "Failed URL override request (err: " + err + "). Please try reload the browser page.");
                if (err === urloverride.ERR_NOT_MATCHED) {
                    response.writeHead(404);
                    response.end();
                } else if (err === urloverride.ERR_AUTH_FAILED) {
                    response.writeHead(403);
                    response.end("LiveReload cannot authenticate this request; please reload the page. (Happens if you restart LiveReload app.)");
                } else if (err === urloverride.ERR_FILE_NOT_FOUND) {
                    response.writeHead(404);
                    response.end("The given file no longer exists. Please reload the page.");
                } else {
                    response.writeHead(500);
                    response.end("Error processing this request. Please see the log file, and try reloading this page.");
                }
            } else {
                response.setHeader('Content-Type', result.mime);
                response.setHeader('Content-Length', result.content.length);
                response.end(result.content);
            }
        });
    }

    private _handleServerError() {
        // TODO: other errors?
        this.send({ service: 'kernel', command: 'on-browser-v6-protocol-connection' });
    }

    private _log(level, text) {
        this.send({ service: 'kernel', command: 'log', level: level, text: text });
    }

}

export = createBrowserService;
function createBrowserService(carrier, options: any = {}): soa.Service {
    options.name || (options.name = 'server');
    return new BrowserService(carrier, options);
}
