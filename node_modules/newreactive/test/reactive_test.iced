{ ok, equal, deepEqual } = require 'assert'
_ = require 'underscore'
R = require "../#{process.env.JSLIB or 'lib'}/reactive"


Object.defineProperty R.Universe::, 'kindNames', get: ->  _.pluck(@kinds, 'kind').sort()

catchAndReturnError = (func) ->
  try func(); return null
  catch err then return err


describe 'R', ->

  it "exports VERSION", ->
    ok R.VERSION.match /^\d+\.\d+\.\d+$/


describe 'R.Universe', ->
  beforeEach -> @universe = new R.Universe()
  afterEach  -> @universe.dispose(); delete @universe

  describe '#register(klass)', ->

    describe "given a regular class", ->
      class MyApp
      beforeEach -> @universe.register(MyApp)

      it "registers a kind matching the given class name", ->
        deepEqual @universe.kindNames, ['MyApp']

      it "adds the given class to the list of the kind's mixins", ->
        deepEqual @universe.kinds.MyApp.klasses, [MyApp]

    describe "given a class with a two-part name like Foo_Bar", ->
      class MyApp_SomeMethods
      beforeEach -> @universe.register(MyApp_SomeMethods)

      it "uses only the first part as the entity kind", ->
        deepEqual @universe.kindNames, ['MyApp']

    describe "given multiple classes for the same entity", ->
      class MyApp_SomeMethods
      class MyApp_OtherMethods
      beforeEach -> @universe.register(MyApp_SomeMethods)
      beforeEach -> @universe.register(MyApp_OtherMethods)

      it "merges them into a single entity kind", ->
        deepEqual @universe.kindNames, ['MyApp']


  describe '#create(kind, [attributes])', ->

    describe "given a valid kind", ->
      class MyApp_SomeMethods

      beforeEach ->
        @universe.register(MyApp_SomeMethods)
        @entity = @universe.create('MyApp')

      it "returns a new entity of that kind", ->
        ok @entity.isReactiveEntity
        equal @entity.kind, 'MyApp'

    describe "given an unknown kind", ->
      beforeEach -> @err = catchAndReturnError => @universe.create('NonExistent')
      it "throws an error", ->
        equal @err.message, "R.create: unknown entity kind 'NonExistent'"


describe 'R.Entity', ->
  beforeEach -> @universe = new R.Universe()
  afterEach  -> @universe.dispose(); delete @universe


  describe ".constructor.name", ->
    class MyApp_SomeMethods
    beforeEach ->
      @universe.register(MyApp_SomeMethods)
      @entity = @universe.create('MyApp')
    it "matches entity kind", ->
      equal @entity.constructor.name, 'MyApp'


  describe "with a single attribute", ->
    class MyApp
      schema:
        eventCount: { type: 'int' }
    beforeEach -> @universe.register(MyApp)

    it "has that attribute defined on the schema", ->
      ok @universe.kinds.MyApp.attributes.eventCount
