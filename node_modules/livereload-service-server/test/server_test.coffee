sinon = require 'sinon'
createService = require '../lib/server'
soa = require 'livereload-soa'

describe "Server service", ->

  beforeEach -> @carrier = new soa.StubCarrier(); sinon.spy(@carrier, 'send')
  beforeEach -> @service = createService(@carrier)
  afterEach (done) -> @service?.dispose(done)

  it "sends 'hello' immediately after creation", ->
    sinon.assert.calledWith(@carrier.send, { command: 'hello', services: ['server'] })

  describe "after receiving 'init'", ->
    beforeEach (done) -> @carrier.simulate({ command: 'init', appVersion: '3.2.1' }, done)

    it "starts listening", ->
      sinon.assert.calledWith(@carrier.send, sinon.match({ command: 'log', text: sinon.match('WebSocket server listening on port') }))

    it "sends server-connection-count-changed with connectionCount=0", ->
      sinon.assert.calledWith(@carrier.send, sinon.match({ command: 'server-connection-count-changed', connectionCount: 0 }))

    it "sends server-refresh-count-changed with refreshCount=0", ->
      sinon.assert.calledWith(@carrier.send, sinon.match({ command: 'server-refresh-count-changed', refreshCount: 0 }))

  describe "after being disposed", ->
    beforeEach (done) -> @carrier.simulate({ command: 'init', appVersion: '3.2.1' }, done)
    beforeEach (done) -> @service.dispose(done)

    it "stops listening", ->
      sinon.assert.calledWith(@carrier.send, sinon.match({ command: 'log', text: sinon.match('WebSocket server closed') }))

  describe "after receiving 'reload'", ->
    beforeEach (done) -> @carrier.simulate({ command: 'init', appVersion: '3.2.1' }, done)
    beforeEach (done) -> @carrier.simulate({ command: 'reload', messages: [{ path: 'foo.css', liveCSS: true }] }, done)

    it "sends server-refresh-count-changed with refreshCount=1", ->
      sinon.assert.calledWith(@carrier.send, sinon.match({ command: 'server-refresh-count-changed', refreshCount: 1 }))
