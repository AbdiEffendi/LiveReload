// Generated by IcedCoffeeScript 1.3.1c
(function() {
  var CheckInterval, Debug, DebugCheckInterval, DebugPingInterval, PREF_LANG_PING, PingInterval, doPingServer, http, pingServer, unixTime;

  http = require('http');

  PREF_LANG_PING = 'stats.AppNewsKitLastPingTime';

  Debug = false;

  PingInterval = 24 * 60 * 60;

  CheckInterval = 30 * 60;

  DebugPingInterval = 60.;

  DebugCheckInterval = 10.;

  unixTime = function() {
    return Math.floor(+new Date() / 1000);
  };

  doPingServer = function(scheduled) {
    var options, version;
    version = LR.version;
    options = {
      host: 'livereload.com',
      port: 80,
      path: "/ping.php?platform=windows&v=" + version + "&iv=" + version + "&scheduled=" + (scheduled && 1 || 0)
    };
    LR.log.fyi("Pinging server... (http://" + options.host + options.path + ")");
    return http.get(options, function(res) {
      LR.log.fyi("Server ping successful, response code = " + res.statusCode);
      if (res.statusCode === 200) {
        return LR.preferences.set(PREF_LANG_PING, unixTime());
      }
    }).on('error', function(err) {
      return LR.log.wtf("Server ping failed: " + err.message);
    });
  };

  pingServer = function(force) {
    return LR.preferences.get(PREF_LANG_PING, function(value) {
      var schedule;
      schedule = value && unixTime() > value + PingInterval;
      if (Debug && value && (unixTime() > value + DebugPingInterval)) force = true;
      if (schedule || force) return doPingServer(schedule);
    });
  };

  exports.startup = function() {
    pingServer(true);
    return setInterval((function() {
      return pingServer(false);
    }), (Debug && DebugCheckInterval || CheckInterval) * 1000);
  };

}).call(this);
