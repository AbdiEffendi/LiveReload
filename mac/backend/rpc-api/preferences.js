// Generated by IcedCoffeeScript 1.3.1c
(function() {
  var Path, PreferenceCategory, fs, nop, split, _categories, _path, _savingDelay,
    __slice = [].slice;

  Path = require('path');

  fs = require('fs');

  _categories = {};

  _path = {};

  _savingDelay = 100;

  PreferenceCategory = (function() {

    function PreferenceCategory(name) {
      this.name = name;
      this.path = Path.join(_path, "" + this.name + ".json");
      this.data = null;
      this.savingTimer = null;
      this.defaults = {};
      this.loadCallbacks = [];
    }

    PreferenceCategory.prototype.doLoad = function() {
      var _this = this;
      return fs.readFile(this.path, 'utf8', function(err, raw) {
        var callback, callbacks, _i, _len, _ref;
        if (err || !raw) {
          _this.data = {};
        } else {
          try {
            _this.data = JSON.parse(raw);
          } catch (e) {
            LR.log.wtf("Failed to parse preference file " + _this.path);
          }
        }
        _ref = [_this.loadCallbacks, null], callbacks = _ref[0], _this.loadCallbacks = _ref[1];
        for (_i = 0, _len = callbacks.length; _i < _len; _i++) {
          callback = callbacks[_i];
          callback();
        }
      });
    };

    PreferenceCategory.prototype.load = function(callback) {
      if (!this.loadCallbacks) return callback();
      this.loadCallbacks.push(callback);
      if (this.loadCallbacks.length === 1) return this.doLoad();
    };

    PreferenceCategory.prototype.saveNow = function() {
      var _this = this;
      return fs.writeFile(this.path, JSON.stringify(this.data, null, 2), 'utf8', function(err) {
        if (err) {
          return LR.log.wtf("Failed to save preferences file " + _this.path);
        }
      });
    };

    PreferenceCategory.prototype.save = function() {
      var _this = this;
      if (!this.savingTimer) {
        return this.savingTimer = setTimeout((function() {
          _this.savingTimer = null;
          return _this.saveNow();
        }), _savingDelay);
      }
    };

    PreferenceCategory.prototype.get = function(subkey, callback) {
      var _this = this;
      return this.load(function() {
        if (subkey) {
          if (_this.data.hasOwnProperty(subkey)) {
            return callback(_this.data[subkey]);
          } else {
            return callback(_this.defaults[subkey]);
          }
        } else {
          return callback(_this.data);
        }
      });
    };

    PreferenceCategory.prototype.set = function(subkey, value, callback) {
      var _this = this;
      return this.load(function() {
        if (subkey) {
          if (_this.defaults.hasOwnProperty(subkey) && _this.defaults[subkey] === value) {
            delete _this.data[subkey];
          } else {
            _this.data[subkey] = value;
          }
        } else {
          _this.data = value;
        }
        _this.save();
        return callback();
      });
    };

    PreferenceCategory.prototype.setDefault = function(subkey, value) {
      return this.defaults[subkey] = value;
    };

    return PreferenceCategory;

  })();

  split = function(key) {
    var category, categoryName, subkey, _ref;
    _ref = key.split('.'), categoryName = _ref[0], subkey = 2 <= _ref.length ? __slice.call(_ref, 1) : [];
    subkey = subkey.join('.');
    category = (_categories[categoryName] || (_categories[categoryName] = new PreferenceCategory(categoryName)));
    return [category, subkey];
  };

  nop = function() {};

  exports.init = function(path, callback) {
    _path = path;
    return callback();
  };

  exports.setTestingOptions = function(_arg) {
    var savingDelay;
    savingDelay = _arg.savingDelay;
    return _savingDelay = savingDelay;
  };

  exports.setDefault = function(key, value) {
    var category, subkey, _ref;
    if (!_path) throw new Error("Preferences not initialized yet");
    _ref = split(key), category = _ref[0], subkey = _ref[1];
    return category.setDefault(subkey, value);
  };

  exports.set = function(key, value, callback) {
    var category, subkey, _ref;
    if (callback == null) callback = nop;
    if (!_path) throw new Error("Preferences not initialized yet");
    _ref = split(key), category = _ref[0], subkey = _ref[1];
    return category.set(subkey, value, callback);
  };

  exports.get = function(key, callback) {
    var category, subkey, _ref;
    if (!_path) throw new Error("Preferences not initialized yet");
    _ref = split(key), category = _ref[0], subkey = _ref[1];
    return category.get(subkey, callback);
  };

}).call(this);
