// Generated by IcedCoffeeScript 1.3.1c
(function() {
  var ERR_AUTH_FAILED, ERR_FILE_NOT_FOUND, ERR_NOT_MATCHED, LRWebSocketController, LRWebSocketServer, Path, ResourceFolder, URLOverrideCoordinator, fs, iced, __iced_k, __iced_k_noop, _controller, _ref,
    __slice = [].slice;

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = __iced_k_noop = function() {};

  fs = require('fs');

  Path = require('path');

  LRWebSocketServer = require('livereload-server');

  _ref = require('../lib/network/urloverride'), URLOverrideCoordinator = _ref.URLOverrideCoordinator, ERR_NOT_MATCHED = _ref.ERR_NOT_MATCHED, ERR_AUTH_FAILED = _ref.ERR_AUTH_FAILED, ERR_FILE_NOT_FOUND = _ref.ERR_FILE_NOT_FOUND;

  ResourceFolder = Path.join(__dirname, '../res');

  LRWebSocketController = (function() {

    function LRWebSocketController() {
      var _this = this;
      this.server = new LRWebSocketServer({
        port: +process.env['LRPortOverride'] || null,
        id: "com.livereload.LiveReload",
        name: "LiveReload",
        version: "3.0.0"
      });
      this.server.on('httprequest', this._onhttprequest.bind(this));
      this.server.on('connected', this._updateConnectionCountInUI.bind(this));
      this.server.on('disconnected', this._updateConnectionCountInUI.bind(this));
      this.server.on('command', function(connection) {});
      this.server.on('livereload.js', function(req, res) {
        var data, err, ___iced_passed_deferral, __iced_deferrals, __iced_k;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        console.log("Serving livereload.js.");
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "cli/rpc-api/websockets.coffee"
          });
          fs.readFile(Path.join(__dirname, '../res/livereload.js'), 'utf8', __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return data = arguments[1];
              };
            })(),
            lineno: 28
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (err) throw err;
          res.writeHead(200, {
            'Content-Length': data.length,
            'Content-Type': 'text/javascript'
          });
          return res.end(data);
        });
      });
      this.server.on('error', function(err, connection) {
        return LR.app.displayHelpfulWarning({
          title: "Legacy browser extensions",
          text: "LiveReload browser extensions 1.x are no longer supported and won't work with LiveReload 2.\n\nPlease update your browser extensions to version 2.x to get advantage of many bug fixes, automatic reconnection, @import support, in-browser LESS.js support and more.",
          button: "Update Now",
          url: "http://help.livereload.com/kb/general-use/browser-extensions"
        });
      });
      this.changeCount = 0;
      this.urlOverrideCoordinator = new URLOverrideCoordinator();
      this.monitoringCessationTimer = null;
      this.monitoringCessationTimeout = 30000;
    }

    LRWebSocketController.prototype.init = function(callback) {
      var _this = this;
      return this.server.listen(function(err) {
        if (err) {
          if (err.code && err.code === 'EADDRINUSE') {
            LR.app.displayCriticalError({
              title: "Failed to start: port occupied",
              text: "LiveReload cannot listen on port " + _this.server.port + ". You probably have another copy of LiveReload 2.x, a command-line LiveReload 1.x or an alternative tool like guard-livereload running.\n\nPlease quit any other live reloaders and rerun LiveReload.",
              url: 'http://help.livereload.com/kb/troubleshooting/failed-to-start-port-occupied'
            });
            return callback(null);
          } else {
            return callback(err);
          }
        }
        LR.log.fyi("WebSocket server listening on port " + _this.server.port + ".");
        return callback(null);
      });
    };

    LRWebSocketController.prototype.sendReloadCommand = function(_arg) {
      var connection, enableOverride, liveCSS, message, originalPath, path, _i, _len, _ref1;
      path = _arg.path, originalPath = _arg.originalPath, liveCSS = _arg.liveCSS, enableOverride = _arg.enableOverride;
      _ref1 = this.server.monitoringConnections();
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        connection = _ref1[_i];
        message = {
          command: 'reload',
          path: path,
          originalPath: originalPath,
          liveCSS: liveCSS
        };
        if (enableOverride && this.urlOverrideCoordinator.shouldOverrideFile(path)) {
          message.overrideURL = this.urlOverrideCoordinator.createOverrideURL(path);
        }
        connection.send(message);
      }
      this.changeCount += 1;
      this._updateChangeCountInUI();
      if (this.monitoringConnectionCount() > 0) {
        return LR.client.app.goodTimeToDeliverNews();
      }
    };

    LRWebSocketController.prototype.monitoringConnectionCount = function() {
      return this.server.monitoringConnectionCount();
    };

    LRWebSocketController.prototype._updateConnectionCountInUI = function() {
      var _this = this;
      LR.client.mainwnd.setConnectionStatus({
        connectionCount: this.monitoringConnectionCount()
      });
      if (this.monitoringConnectionCount() > 0) {
        LR.client.workspace.setMonitoringEnabled(true);
        if (this.monitoringCessationTimer) {
          clearTimeout(this.monitoringCessationTimer);
          return this.monitoringCessationTimer = null;
        }
      } else {
        if (!this.monitoringCessationTimer) {
          return this.monitoringCessationTimer = setTimeout(function() {
            LR.client.workspace.setMonitoringEnabled(false);
            return _this.monitoringCessationTimer = null;
          }, this.monitoringCessationTimeout);
        }
      }
    };

    LRWebSocketController.prototype._updateChangeCountInUI = function() {
      return LR.client.mainwnd.setChangeCount({
        changeCount: this.changeCount
      });
    };

    LRWebSocketController.prototype._onhttprequest = function(url, request, response) {
      var data;
      if (url.pathname.match(/^\/x?livereload\.js$/)) {
        data = fs.readFileSync(Path.join(ResourceFolder, 'livereload.js'));
        response.writeHead(200, {
          'Content-Length': data.length,
          'Content-Type': 'text/javascript'
        });
        return response.end(data);
      } else {
        return this.urlOverrideCoordinator.handleHttpRequest(url, function(err, result) {
          if (err) {
            if (err === ERR_NOT_MATCHED) {
              response.writeHead(404);
              return response.end();
            } else if (err === ERR_AUTH_FAILED) {
              response.writeHead(403);
              return response.end("LiveReload cannot authenticate this request; please reload the page. (Happens if you restart LiveReload app.)");
            } else if (err === ERR_FILE_NOT_FOUND) {
              response.writeHead(404);
              return response.end("The given file no longer exists. Please reload the page.");
            } else {
              LR.omg("Error processing URL override HTTP request: " + (e.message || e));
              response.writeHead(500);
              return response.end("Error processing this request. Please see the log file, and try reloading this page.");
            }
          } else {
            response.setHeader('Content-Type', result.mime);
            response.setHeader('Content-Length', result.content.length);
            return response.end(result.content);
          }
        });
      }
    };

    return LRWebSocketController;

  })();

  _controller = new LRWebSocketController();

  exports.init = function(cb) {
    return _controller.init(cb);
  };

  exports.api = {
    sendReloadCommand: function(arg, callback) {
      _controller.sendReloadCommand(arg);
      return callback(null);
    }
  };

}).call(this);
